import numpy as np
from math import *

import pygame
from pygame.locals import *

from OpenGL.GL import *
from OpenGL.GLU import *

import serial
from serial.serialutil import SerialException

from kalmanfilters import cvqekf
from kalmanfilters.linalg import Vector, Matrix
from kalmanfilters.sensors import accel, gyro, mag


def get_rot_mat(phi, theta, psi):
    R = [
        [
            cos(psi) * cos(theta),
            sin(phi) * sin(theta) * cos(psi) - sin(psi) * cos(phi),
            sin(phi) * sin(psi) + sin(theta) * cos(phi) * cos(psi),
            0.0,
        ],
        [
            sin(psi) * cos(theta),
            sin(phi) * sin(psi) * sin(theta) + cos(phi) * cos(psi),
            -sin(phi) * cos(psi) + sin(psi) * sin(theta) * cos(phi),
            0.0,
        ],
        [-sin(theta), sin(phi) * cos(theta), cos(phi) * cos(theta), 0.0],
        [0.0, 0.0, 0.0, 1.0],
    ]

    return R


def q_to_euler(q):
    qw, qx, qy, qz = q

    phi = np.arctan2(2.0 * (qy * qz + qw * qx), qw * qw - qx * qx - qy * qy + qz * qz)
    theta = np.arcsin(-2.0 * (qx * qz - qw * qy))
    psi = np.arctan2(2.0 * (qx * qy + qw * qz), qw * qw + qx * qx - qy * qy - qz * qz)

    return phi, theta, psi


compass_verts = (
    (6.0, 0.0, 0.0),
    (7.0, 0.0, 0.0),
    (6.475265537596346, 0.5665123278597781, 0.0),
    (6.973362886642219, 0.6100901992336072, 0.0),
    (6.401250394579352, 1.128713154835047, 0.0),
    (6.893654271085456, 1.2155372436685123, 0.0),
    (5.79555495773441, 1.5529142706151244, 0.0),
    (6.761480784023478, 1.8117333157176452, 0.0),
    (6.108002035108405, 2.2231309316168466, 0.0),
    (6.5778483455013586, 2.394141003279681, 0.0),
    (5.891000615738225, 2.747018701314546, 0.0),
    (6.3441545092565494, 2.9583278321848963, 0.0),
    (5.196152422706632, 2.9999999999999996, 0.0),
    (6.062177826491071, 3.4999999999999996, 0.0),
    (5.324488287878447, 3.7282468362817993, 0.0),
    (5.7340643100229425, 4.015035054457322, 0.0),
    (4.979288880273358, 4.178119462962505, 0.0),
    (5.362311101832847, 4.499513267805774, 0.0),
    (4.242640687119286, 4.242640687119285, 0.0),
    (4.949747468305833, 4.949747468305832, 0.0),
    (4.178119462962506, 4.979288880273357, 0.0),
    (4.499513267805775, 5.362311101832846, 0.0),
    (3.7282468362818, 5.324488287878446, 0.0),
    (4.015035054457323, 5.734064310022942, 0.0),
    (3.000000000000001, 5.196152422706632, 0.0),
    (3.500000000000001, 6.06217782649107, 0.0),
    (2.747018701314546, 5.891000615738225, 0.0),
    (2.9583278321848963, 6.3441545092565494, 0.0),
    (2.2231309316168475, 6.108002035108404, 0.0),
    (2.3941410032796817, 6.5778483455013586, 0.0),
    (1.5529142706151244, 5.79555495773441, 0.0),
    (1.8117333157176452, 6.761480784023478, 0.0),
    (1.1287131548350477, 6.401250394579352, 0.0),
    (1.2155372436685128, 6.893654271085456, 0.0),
    (0.5665123278597792, 6.475265537596346, 0.0),
    (0.6100901992336084, 6.973362886642219, 0.0),
    (3.6739403974420594e-16, 6.0, 0.0),
    (4.286263797015736e-16, 7.0, 0.0),
    (-0.5665123278597771, 6.475265537596346, 0.0),
    (-0.6100901992336061, 6.973362886642219, 0.0),
    (-1.1287131548350469, 6.401250394579352, 0.0),
    (-1.2155372436685121, 6.893654271085456, 0.0),
    (-1.5529142706151238, 5.79555495773441, 0.0),
    (-1.8117333157176443, 6.761480784023478, 0.0),
    (-2.2231309316168466, 6.108002035108405, 0.0),
    (-2.394141003279681, 6.5778483455013586, 0.0),
    (-2.7470187013145457, 5.891000615738225, 0.0),
    (-2.9583278321848954, 6.34415450925655, 0.0),
    (-2.9999999999999987, 5.196152422706633, 0.0),
    (-3.4999999999999982, 6.062177826491071, 0.0),
    (-3.728246836281798, 5.324488287878448, 0.0),
    (-4.015035054457321, 5.734064310022944, 0.0),
    (-4.178119462962505, 4.979288880273358, 0.0),
    (-4.499513267805774, 5.362311101832847, 0.0),
    (-4.242640687119285, 4.242640687119286, 0.0),
    (-4.949747468305832, 4.949747468305833, 0.0),
    (-4.979288880273357, 4.178119462962506, 0.0),
    (-5.362311101832845, 4.499513267805776, 0.0),
    (-5.324488287878446, 3.7282468362818015, 0.0),
    (-5.734064310022942, 4.015035054457325, 0.0),
    (-5.196152422706632, 2.9999999999999996, 0.0),
    (-6.062177826491071, 3.4999999999999996, 0.0),
    (-5.891000615738225, 2.7470187013145466, 0.0),
    (-6.3441545092565494, 2.9583278321848967, 0.0),
    (-6.108002035108404, 2.223130931616848, 0.0),
    (-6.5778483455013586, 2.394141003279682, 0.0),
    (-5.795554957734409, 1.5529142706151262, 0.0),
    (-6.761480784023478, 1.8117333157176472, 0.0),
    (-6.401250394579352, 1.1287131548350495, 0.0),
    (-6.893654271085456, 1.2155372436685148, 0.0),
    (-6.475265537596346, 0.5665123278597782, 0.0),
    (-6.973362886642219, 0.6100901992336074, 0.0),
    (-6.0, 7.347880794884119e-16, 0.0),
    (-7.0, 8.572527594031472e-16, 0.0),
    (-6.475265537596346, -0.5665123278597767, 0.0),
    (-6.973362886642219, -0.6100901992336056, 0.0),
    (-6.401250394579353, -1.128713154835045, 0.0),
    (-6.893654271085457, -1.2155372436685101, 0.0),
    (-5.79555495773441, -1.5529142706151249, 0.0),
    (-6.761480784023478, -1.8117333157176456, 0.0),
    (-6.108002035108405, -2.223130931616846, 0.0),
    (-6.5778483455013586, -2.394141003279681, 0.0),
    (-5.891000615738225, -2.7470187013145453, 0.0),
    (-6.34415450925655, -2.958327832184895, 0.0),
    (-5.196152422706633, -2.9999999999999987, 0.0),
    (-6.062177826491071, -3.4999999999999982, 0.0),
    (-5.324488287878448, -3.728246836281798, 0.0),
    (-5.734064310022944, -4.015035054457321, 0.0),
    (-4.979288880273358, -4.178119462962505, 0.0),
    (-5.362311101832847, -4.499513267805774, 0.0),
    (-4.242640687119286, -4.242640687119285, 0.0),
    (-4.949747468305834, -4.949747468305832, 0.0),
    (-4.178119462962507, -4.979288880273357, 0.0),
    (-4.499513267805777, -5.362311101832845, 0.0),
    (-3.7282468362818015, -5.324488287878445, 0.0),
    (-4.015035054457325, -5.734064310022941, 0.0),
    (-3.0000000000000027, -5.19615242270663, 0.0),
    (-3.500000000000003, -6.062177826491069, 0.0),
    (-2.7470187013145497, -5.891000615738223, 0.0),
    (-2.9583278321848994, -6.344154509256548, 0.0),
    (-2.2231309316168506, -6.108002035108403, 0.0),
    (-2.3941410032796853, -6.577848345501358, 0.0),
    (-1.5529142706151238, -5.79555495773441, 0.0),
    (-1.8117333157176443, -6.761480784023478, 0.0),
    (-1.128713154835047, -6.401250394579352, 0.0),
    (-1.2155372436685123, -6.893654271085456, 0.0),
    (-0.5665123278597786, -6.475265537596346, 0.0),
    (-0.6100901992336077, -6.973362886642219, 0.0),
    (-1.102182119232618e-15, -6.0, 0.0),
    (-1.2858791391047208e-15, -7.0, 0.0),
    (0.5665123278597762, -6.475265537596346, 0.0),
    (0.6100901992336052, -6.973362886642219, 0.0),
    (1.1287131548350449, -6.401250394579353, 0.0),
    (1.2155372436685097, -6.893654271085457, 0.0),
    (1.5529142706151218, -5.79555495773441, 0.0),
    (1.811733315717642, -6.761480784023479, 0.0),
    (2.2231309316168435, -6.108002035108406, 0.0),
    (2.3941410032796773, -6.577848345501359, 0.0),
    (2.747018701314542, -5.891000615738227, 0.0),
    (2.958327832184892, -6.344154509256552, 0.0),
    (3.0, -5.196152422706632, 0.0),
    (3.5, -6.06217782649107, 0.0),
    (3.7282468362817993, -5.324488287878447, 0.0),
    (4.015035054457322, -5.7340643100229425, 0.0),
    (4.178119462962505, -4.979288880273358, 0.0),
    (4.499513267805774, -5.362311101832847, 0.0),
    (4.242640687119285, -4.242640687119286, 0.0),
    (4.949747468305832, -4.949747468305834, 0.0),
    (4.979288880273357, -4.178119462962507, 0.0),
    (5.362311101832845, -4.499513267805777, 0.0),
    (5.324488287878445, -3.7282468362818015, 0.0),
    (5.734064310022941, -4.015035054457325, 0.0),
    (5.19615242270663, -3.0000000000000027, 0.0),
    (6.062177826491069, -3.500000000000003, 0.0),
    (5.891000615738223, -2.74701870131455, 0.0),
    (6.344154509256548, -2.9583278321849, 0.0),
    (6.108002035108403, -2.223130931616851, 0.0),
    (6.577848345501358, -2.3941410032796857, 0.0),
    (5.79555495773441, -1.552914270615124, 0.0),
    (6.761480784023478, -1.8117333157176447, 0.0),
    (6.401250394579352, -1.1287131548350475, 0.0),
    (6.893654271085456, -1.2155372436685128, 0.0),
    (6.475265537596346, -0.5665123278597791, 0.0),
    (6.973362886642219, -0.6100901992336082, 0.0),
)

compass = (
    (0, 1),
    (2, 3),
    (4, 5),
    (6, 7),
    (8, 9),
    (10, 11),
    (12, 13),
    (14, 15),
    (16, 17),
    (18, 19),
    (20, 21),
    (22, 23),
    (24, 25),
    (26, 27),
    (28, 29),
    (30, 31),
    (32, 33),
    (34, 35),
    (36, 37),
    (38, 39),
    (40, 41),
    (42, 43),
    (44, 45),
    (46, 47),
    (48, 49),
    (50, 51),
    (52, 53),
    (54, 55),
    (56, 57),
    (58, 59),
    (60, 61),
    (62, 63),
    (64, 65),
    (66, 67),
    (68, 69),
    (70, 71),
    (72, 73),
    (74, 75),
    (76, 77),
    (78, 79),
    (80, 81),
    (82, 83),
    (84, 85),
    (86, 87),
    (88, 89),
    (90, 91),
    (92, 93),
    (94, 95),
    (96, 97),
    (98, 99),
    (100, 101),
    (102, 103),
    (104, 105),
    (106, 107),
    (108, 109),
    (110, 111),
    (112, 113),
    (114, 115),
    (116, 117),
    (118, 119),
    (120, 121),
    (122, 123),
    (124, 125),
    (126, 127),
    (128, 129),
    (130, 131),
    (132, 133),
    (134, 135),
    (136, 137),
    (138, 139),
    (140, 141),
    (142, 143),
)

compass_colors = (
    (1.0, 0.0, 0.0),
    (1.0, 1.0, 1.0),
    (1.0, 1.0, 1.0),
    (1.0, 1.0, 1.0),
    (1.0, 1.0, 1.0),
    (1.0, 1.0, 1.0),
    (1.0, 1.0, 1.0),
    (1.0, 1.0, 1.0),
    (1.0, 1.0, 1.0),
    (1.0, 1.0, 1.0),
    (1.0, 1.0, 1.0),
    (1.0, 1.0, 1.0),
    (1.0, 1.0, 1.0),
    (1.0, 1.0, 1.0),
    (1.0, 1.0, 1.0),
    (1.0, 1.0, 1.0),
    (1.0, 1.0, 1.0),
    (1.0, 1.0, 1.0),
    (1.0, 1.0, 1.0),
    (1.0, 1.0, 1.0),
    (1.0, 1.0, 1.0),
    (1.0, 1.0, 1.0),
    (1.0, 1.0, 1.0),
    (1.0, 1.0, 1.0),
    (1.0, 1.0, 1.0),
    (1.0, 1.0, 1.0),
    (1.0, 1.0, 1.0),
    (1.0, 1.0, 1.0),
    (1.0, 1.0, 1.0),
    (1.0, 1.0, 1.0),
    (1.0, 1.0, 1.0),
    (1.0, 1.0, 1.0),
    (1.0, 1.0, 1.0),
    (1.0, 1.0, 1.0),
    (1.0, 1.0, 1.0),
    (1.0, 1.0, 1.0),
    (1.0, 1.0, 1.0),
    (1.0, 1.0, 1.0),
    (1.0, 1.0, 1.0),
    (1.0, 1.0, 1.0),
    (1.0, 1.0, 1.0),
    (1.0, 1.0, 1.0),
    (1.0, 1.0, 1.0),
    (1.0, 1.0, 1.0),
    (1.0, 1.0, 1.0),
    (1.0, 1.0, 1.0),
    (1.0, 1.0, 1.0),
    (1.0, 1.0, 1.0),
    (1.0, 1.0, 1.0),
    (1.0, 1.0, 1.0),
    (1.0, 1.0, 1.0),
    (1.0, 1.0, 1.0),
    (1.0, 1.0, 1.0),
    (1.0, 1.0, 1.0),
    (1.0, 1.0, 1.0),
    (1.0, 1.0, 1.0),
    (1.0, 1.0, 1.0),
    (1.0, 1.0, 1.0),
    (1.0, 1.0, 1.0),
    (1.0, 1.0, 1.0),
    (1.0, 1.0, 1.0),
    (1.0, 1.0, 1.0),
    (1.0, 1.0, 1.0),
    (1.0, 1.0, 1.0),
    (1.0, 1.0, 1.0),
    (1.0, 1.0, 1.0),
    (1.0, 1.0, 1.0),
    (1.0, 1.0, 1.0),
    (1.0, 1.0, 1.0),
    (1.0, 1.0, 1.0),
    (1.0, 1.0, 1.0),
    (1.0, 1.0, 1.0),
)


def Compass():
    glBegin(GL_LINES)
    for color, axis in zip(compass_colors, compass):
        glColor3fv(color)
        for point in axis:
            glVertex3fv(compass_verts[point])
    glEnd()


def main():
    ser = serial.Serial("/dev/tty.usbmodem205E3072594D1", 9600)
    ser.flushInput()

    state = Vector([1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0])
    state_unc = Matrix(
        [
            [4.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
            [0.0, 4.0, 0.0, 0.0, 0.0, 0.0, 0.0],
            [0.0, 0.0, 4.0, 0.0, 0.0, 0.0, 0.0],
            [0.0, 0.0, 0.0, 4.0, 0.0, 0.0, 0.0],
            [0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0],
            [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0],
            [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0],
        ]
    )

    kf = cvqekf(2.0, state, state_unc)

    microsprev = 0.0

    pygame.init()
    display = (360, 360)
    pygame.display.set_mode(display, DOUBLEBUF | OPENGL)

    # Using depth test to make sure closer colors are shown over further ones
    glEnable(GL_DEPTH_TEST)
    glDepthFunc(GL_LESS)

    # Default view
    glMatrixMode(GL_PROJECTION)
    gluPerspective(45, (display[0] / display[1]), 0.5, 40)
    glTranslatef(0.0, 0.0, -17.5)

    while True:
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                pygame.quit()
                quit()

        gluLookAt(0.0, 0.0, 7.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0)

        try:
            ser_bytes = ser.readline()
            decoded_bytes = ser_bytes.decode("utf-8")

            sensor, data = decoded_bytes.rstrip().split(":")
            micros, x, y, z = data.split(",")

            micros = int(micros)
            x = float(x)
            y = float(y)
            z = float(z)

            if sensor == "accl":
                dt = (micros - microsprev) * 1e-6
                microsprev = micros

                Z = accel(x, y, z, 0.25, 0.25, 0.25)

                # run kf step
                kf.predict(dt)
                kf.update(Z)

            elif sensor == "gyro":
                dt = (micros - microsprev) * 1e-6
                microsprev = micros

                Z = gyro(x, y, z, 0.25, 0.25, 0.25)

                # run kf step
                kf.predict(dt)
                kf.update(Z)

            elif sensor == "mag":
                dt = (micros - microsprev) * 1e-6
                microsprev = micros

                Z = mag(x, y, z, 45.0, 45.0, 45.0)

                # run kf step
                kf.predict(dt)
                kf.update(Z)

        except (KeyboardInterrupt, SerialException) as e:
            print(e)
            break
        except Exception as e:
            print(e)
            pass

        glMatrixMode(GL_MODELVIEW)

        qw, qx, qy, qz, _, _, _ = kf.get_state().tovec()
        print(qw, qx, qy, qz)
        phi, theta, psi = q_to_euler([qw, qx, qy, qz])

        glLoadMatrixf(get_rot_mat(0.0, 0.0, -psi))

        glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT)
        Compass()

        pygame.display.flip()
        pygame.time.wait(10)


main()
